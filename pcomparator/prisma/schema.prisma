datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id             String                     @id @default(uuid())
  name           String?
  email          String                     @unique
  emailVerified  DateTime?
  image          String?
  phone          String?
  accounts       Account[]
  sessions       Session[]
  shoppingLists  ShoppingList[]
  collaborations ShoppingListCollaborator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id              String   @id @default(uuid()) @db.Uuid
  barcode         String   @unique
  name            String
  description     String?
  category_id     String?  @db.Uuid
  brand_id        String?  @db.Uuid
  nutrition_score Json?    @db.JsonB
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  category Category? @relation(fields: [category_id], references: [id])
  brand    Brand?    @relation(fields: [brand_id], references: [id])
  prices   Price[]

  ShoppingListItem ShoppingListItem[]
}

model Category {
  id                 String  @id @default(uuid()) @db.Uuid
  name               String  @unique
  description        String?
  parent_category_id String? @db.Uuid

  // Relations
  products Product[]
}

model Brand {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?
  website_url String?

  // Relations
  products Product[]
}

enum Currency {
  AED // Dirham des Émirats arabes unis
  AUD // Dollar australien
  CAD // Dollar canadien
  CHF // Franc suisse
  CNY // Yuan renminbi chinois
  EUR // Euro
  GBP // Livre sterling
  JPY // Yen japonais
  USD // Dollar américain
}

model Price {
  id                String   @id @default(uuid()) @db.Uuid
  product_id        String   @db.Uuid
  store_id          String   @db.Uuid
  amount            Float
  currency          Currency
  date_recorded     DateTime @default(now())
  price_proof_image String?

  // Relations
  product Product @relation(fields: [product_id], references: [id])
  store   Store   @relation(fields: [store_id], references: [id])
}

model Store {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  location    String
  website_url String?

  // Relations
  prices Price[]

  @@unique([name, location])
}

model ShoppingList {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique

  // Relations
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                    ShoppingListItem[]
  ShoppingListCollaborator ShoppingListCollaborator[]
}

model ShoppingListItem {
  id             String   @id @default(uuid()) @db.Uuid
  shoppingListId String   @db.Uuid
  productId      String?  @db.Uuid
  quantity       Float    @default(1)
  unit           String?  @default("unit")
  isCompleted    Boolean  @default(false)
  customName     String?
  price          Float? // Champ pour stocker le prix d'un article
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  product      Product?     @relation(fields: [productId], references: [id])
}

enum CollaboratorRole {
  OWNER
  EDITOR
  VIEWER
}

model ShoppingListCollaborator {
  id           String           @id @default(uuid()) @db.Uuid
  shoppingList ShoppingList     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId       String           @db.Uuid
  userId       String
  role         CollaboratorRole
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([listId, userId])
}
