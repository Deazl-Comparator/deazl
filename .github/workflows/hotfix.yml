name: Hotfix Release

on:
  push:
    branches:
      - "hotfix/**"
      - main
    paths:
      - ".changeset/**"
      - "packages/**"
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du hotfix'
        required: true
        type: string

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  hotfix:
    name: Emergency Hotfix Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Yarn
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Setup yarn cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check for pending changesets
        id: check-changesets
        run: |
          if [ -n "$(find .changeset -name '*.md' -not -name 'README.md' -print -quit)" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Backup current state
        if: steps.check-changesets.outputs.has_changesets == 'true'
        run: |
          # Backup des fichiers importants
          if [ -f ".changeset/pre.json" ]; then
            cp .changeset/pre.json .changeset/pre.json.backup
            echo "📦 Prerelease state backed up"
          fi

      - name: Create hotfix versions (isolated from prerelease)
        if: steps.check-changesets.outputs.has_changesets == 'true'
        run: |
          # Si on est en mode prerelease, on crée des versions stables temporaires
          if [ -f ".changeset/pre.json" ]; then
            echo "🚨 Creating stable hotfix versions (isolated from prerelease)"
            # Sortir temporairement du mode prerelease
            yarn changeset pre exit
            # Créer les versions stables pour le hotfix
            yarn changeset version
            # Restaurer immédiatement le mode prerelease
            if [ -f ".changeset/pre.json.backup" ]; then
              mv .changeset/pre.json.backup .changeset/pre.json
            fi
          else
            echo "📦 Standard hotfix versioning"
            yarn changeset version
          fi

      - name: Build packages
        run: yarn build

      - name: Run tests
        run: yarn test

      - name: Publish to NPM (Hotfix)
        if: steps.check-changesets.outputs.has_changesets == 'true'
        uses: changesets/action@v1
        with:
          publish: yarn changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit prerelease restoration (if needed)
        if: steps.check-changesets.outputs.has_changesets == 'true'
        run: |
          if [ -f ".changeset/pre.json" ]; then
            echo "🔄 Committing prerelease mode restoration"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .changeset/pre.json
            git commit -m "chore: restore prerelease mode after hotfix [skip ci]" || echo "No changes to commit"
            git push origin main || echo "No changes to push"
          fi

      - name: Create GitHub Release
        if: steps.check-changesets.outputs.has_changesets == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: hotfix-${{ github.sha }}
          release_name: 🚨 Hotfix Release
          body: |
            🚨 **HOTFIX RELEASE**
            
            Raison: ${{ github.event.inputs.reason || 'Critical production issue' }}
            
            Cette release a été publiée en urgence pour corriger un problème critique.
            
            Changements inclus:
            - Correction du bug critique
            - Tests automatiques passés
            
            ⚠️ Cette release bypasse le processus normal de validation.
          draft: false
          prerelease: false

      - name: Notify team
        if: steps.check-changesets.outputs.has_changesets == 'true'
        run: |
          echo "🚨 HOTFIX DEPLOYED"
          echo "Packages publiés en urgence"
          echo "Raison: ${{ github.event.inputs.reason || 'Critical production issue' }}"
