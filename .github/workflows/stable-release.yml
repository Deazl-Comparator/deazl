name: Stable Release

on:
  push:
    paths:
      - ".changeset/**"
      - "packages/**"
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  stable-release:
    name: Stable Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install
        uses: ./.github/actions/yarn-nm-install

      - name: Build packages
        run: yarn build

      - name: Create Release Pull Request or Create Tags
        id: changesets
        uses: changesets/action@v1
        with:
          version: yarn run version
          title: "ci(changesets): :package: version packages"
          commit: "ci(changesets): version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create stable tags and releases
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          # Configure git for tagging
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Exit prerelease mode if we're in one
          if [ -f ".changeset/pre.json" ]; then
            yarn changeset pre exit
            git add .changeset/pre.json
            git commit -m "ci(changesets): exit prerelease mode" || echo "No changes to commit"
            git push origin master
          fi
          
          # Get all packages that were versioned by changesets
          versioned_packages=$(find packages -name "package.json" -exec sh -c 'if git diff HEAD~1 "$1" | grep -q "version"; then node -p "JSON.stringify({name: require(\"$1\").name, version: require(\"$1\").version})"; fi' _ {} \; | grep -v "^$")
          
          if [ -z "$versioned_packages" ]; then
            echo "No packages were versioned, skipping release"
            exit 0
          fi
          
          # Create releases for each versioned package
          echo "$versioned_packages" | while read -r package_info; do
            if [ -n "$package_info" ]; then
              package_name=$(echo "$package_info" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).name")
              package_version=$(echo "$package_info" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
              tag_name="${package_name}@${package_version}"
              
              # Create git tag
              git tag "$tag_name"
              
              # Create GitHub stable release
              gh release create "$tag_name" \
                --title "🚀 Release: $package_name@$package_version" \
                --notes "🎉 **Stable Release: $package_name@$package_version**
                
                Cette release stable inclut toutes les fonctionnalités testées et validées.
                
                **Installation:**
                \`\`\`bash
                # Ces packages ne sont pas publiés sur NPM
                # Utilisez les artefacts de build ou clonez à partir de ce tag
                git clone https://github.com/Deazl-Comparator/deazl.git
                git checkout $tag_name
                yarn install && yarn build
                \`\`\`
                
                **Package:** $package_name  
                **Version:** $package_version
                
                **📋 Changements complets:** Voir le CHANGELOG du package pour tous les détails.
                
                **🔗 Artefacts:** Les packages compilés sont disponibles dans les GitHub Actions artifacts.
                
                **🙏 Merci** à tous les contributeurs qui ont rendu cette release possible !" \
                --latest
            fi
          done
          
          # Push all tags at once
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: stable-build-artifacts-${{ github.sha }}
          path: |
            packages/*/dist/
            packages/*/build/
            packages/*/lib/
          retention-days: 90

      - name: Notify successful release
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "✅ Successfully released version $(git describe --tags --abbrev=0)"
          echo "🎉 GitHub Release created"
          echo "📦 Build artifacts uploaded"
