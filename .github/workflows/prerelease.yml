name: Pre-release

on:
  push:
    paths:
      - ".changeset/**"
      - "packages/**"
    branches:
      - "beta/release-next"

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  prerelease:
    name: changesets pre-release
    runs-on: deazl-runner
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install
        uses: ./.github/actions/yarn-nm-install

      - name: Build packages
        run: yarn build

      - name: Check if pre.json exists
        id: check_if_pre_json_exists
        uses: andstor/file-existence-action@v3.0.0
        with:
          files: ".changeset/pre.json"

      - name: Debug condition values
        run: |
          echo "pre.json exists: ${{ steps.check_if_pre_json_exists.outputs.files_exists }}"
          echo "Commit message: ${{ github.event.head_commit.message }}"
          echo "Contains version packages: ${{ contains(github.event.head_commit.message, 'ci(changesets): version packages') }}"
          echo "Full condition would be: ${{ steps.check_if_pre_json_exists.outputs.files_exists == 'true' && contains(github.event.head_commit.message, 'ci(changesets): version packages') }}"

      - name: Get pre-release changesets
        id: get-pre-release-changesets
        uses: notiz-dev/github-action-json-property@release
        with:
          path: ".changeset/pre.json"
          prop_path: "changesets"

      - name: Create pre-release PR
        id: create-pre-release-pr
        if: "${{ steps.check_if_pre_json_exists.outputs.files_exists == 'true' && !startsWith(github.event.head_commit.message, 'ci(changesets): version packages') }}"
        uses: changesets/action@v1
        with:
          version: yarn run version
          title: "ci(changesets): :package: version packages"
          commit: "ci(changesets): version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create beta tags and releases
        id: create-beta-release
        if: "${{ steps.check_if_pre_json_exists.outputs.files_exists == 'true' && contains(github.event.head_commit.message, 'ci(changesets): version packages') }}"
        run: |
          # Configure git for tagging
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get all packages that were versioned by changesets
          versioned_packages=$(find packages -name "package.json" -exec sh -c 'if git diff HEAD~1 "$1" | grep -q "version"; then node -p "JSON.stringify({name: require(\"$1\").name, version: require(\"$1\").version})"; fi' _ {} \; | grep -v "^$")
          
          if [ -z "$versioned_packages" ]; then
            echo "No packages were versioned, skipping release"
            exit 0
          fi
          
          # Create releases for each versioned package
          echo "$versioned_packages" | while read -r package_info; do
            if [ -n "$package_info" ]; then
              package_name=$(echo "$package_info" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).name")
              package_version=$(echo "$package_info" | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
              tag_name="${package_name}@${package_version}"
              
              # Create git tag
              git tag "$tag_name"
              
              # Create GitHub Release
              gh release create "$tag_name" \
                --title "ðŸ§ª Beta Release: $package_name@$package_version" \
                --notes "ðŸš€ **Beta Prerelease: $package_name@$package_version**
                
                Cette version beta consolide les derniÃ¨res fonctionnalitÃ©s de dÃ©veloppement et est prÃªte pour les tests approfondis.
                
                **Installation:**
                \`\`\`bash
                # Ces packages ne sont pas publiÃ©s sur NPM
                # Utilisez les artefacts de build ou clonez Ã  partir de ce tag
                git clone https://github.com/Deazl-Comparator/deazl.git
                git checkout $tag_name
                yarn install && yarn build
                \`\`\`
                
                **Package:** $package_name  
                **Version:** $package_version
                
                **ðŸ“‹ Changements:** Voir le CHANGELOG du package pour les dÃ©tails.
                
                **ðŸŽ¯ Prochaine Ã©tape:** Si les tests sont concluants, cette version sera promue en release stable.
                
                **ðŸ”— Artefacts:** Les packages compilÃ©s sont disponibles dans les GitHub Actions artifacts." \
                --prerelease
            fi
          done
          
          # Push all tags at once
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        if: "${{ steps.check_if_pre_json_exists.outputs.files_exists == 'true' && contains(github.event.head_commit.message, 'ci(changesets): version packages') }}"
        uses: actions/upload-artifact@v4
        with:
          name: beta-build-artifacts-${{ github.sha }}
          path: |
            packages/*/dist/
            packages/*/build/
            packages/*/lib/
          retention-days: 30